{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nexport default {\n  name: \"ProfessionalExperienceSection\",\n  data() {\n    return {\n      viewMode: \"all\",\n      // 'all' or 'tabs'\n      searchQuery: \"\",\n      selectedYear: new Date().getFullYear().toString(),\n      experiences: [{\n        company: \"Åbo Akademi University\",\n        position: \"Research Assistant\",\n        location: \"Turku, Finland\",\n        startDate: \"Oct 2024\",\n        endDate: \"Present\",\n        tasks: [\"Researching automatization of co-simulation Simulink projects through Functional Mock-up Units (FMUs).\", \"Exploring ubiquitous integration of automation logic for HVAC systems.\"],\n        logo: \"path/to/abo-akademi-logo.png\",\n        year: \"2024\"\n      }, {\n        company: \"Alstom\",\n        position: \"Master's Thesis Student\",\n        location: \"Remote\",\n        startDate: \"Feb 2024\",\n        endDate: \"Oct 2024\",\n        tasks: [\"Performed advanced research in Requirements Engineering for automated technical diagrams.\", \"Enhanced verification processes in railway safety-critical systems using AI and NLP.\"],\n        logo: \"path/to/alstom-logo.png\",\n        year: \"2024\"\n      }\n      // ... Add the remaining experiences here\n      ]\n    };\n  },\n  computed: {\n    // Filter experiences based on search query\n    filteredExperiences() {\n      const query = this.searchQuery.toLowerCase();\n      return this.experiences.filter(exp => exp.company.toLowerCase().includes(query) || exp.position.toLowerCase().includes(query));\n    },\n    // Extract unique years\n    years() {\n      return [...new Set(this.experiences.map(experience => experience.year))].sort((a, b) => b - a);\n    },\n    // Group experiences by year\n    experiencesByYear() {\n      return this.experiences.reduce((acc, exp) => {\n        if (!acc[exp.year]) acc[exp.year] = [];\n        acc[exp.year].push(exp);\n        return acc;\n      }, {});\n    }\n  },\n  methods: {\n    setViewMode(mode) {\n      this.viewMode = mode;\n    }\n  }\n};","map":{"version":3,"names":["name","data","viewMode","searchQuery","selectedYear","Date","getFullYear","toString","experiences","company","position","location","startDate","endDate","tasks","logo","year","computed","filteredExperiences","query","toLowerCase","filter","exp","includes","years","Set","map","experience","sort","a","b","experiencesByYear","reduce","acc","push","methods","setViewMode","mode"],"sources":["src/components/ExperienceSection.vue"],"sourcesContent":["<template>\n  <section id=\"experience\" class=\"light-section\">\n    <div class=\"container\">\n      <h1 class=\"section-header\">Professional Experience</h1>\n\n      <!-- View Mode Selector -->\n      <div class=\"view-selector\">\n        <button\n          :class=\"viewMode === 'all' ? 'active' : ''\"\n          @click=\"setViewMode('all')\"\n        >\n          View All\n        </button>\n        <button\n          :class=\"viewMode === 'tabs' ? 'active' : ''\"\n          @click=\"setViewMode('tabs')\"\n        >\n          View by Year\n        </button>\n      </div>\n\n      <!-- Filter -->\n      <div v-if=\"viewMode === 'all'\" class=\"filter-container\">\n        <input\n          v-model=\"searchQuery\"\n          type=\"text\"\n          placeholder=\"Filter by title or company...\"\n        />\n      </div>\n\n      <!-- All Experiences View -->\n      <div v-if=\"viewMode === 'all'\" class=\"experience-list\">\n        <div\n          v-for=\"(item, index) in filteredExperiences\"\n          :key=\"index\"\n          class=\"experience-item\"\n        >\n          <div class=\"logo\">\n            <img :src=\"item.logo\" :alt=\"item.company + ' logo'\" />\n          </div>\n          <div class=\"details\">\n            <h2 class=\"company\">{{ item.company }}</h2>\n            <p class=\"position\">{{ item.position }}</p>\n            <p class=\"duration\">{{ item.startDate }} – {{ item.endDate }}</p>\n            <p class=\"location\">{{ item.location }}</p>\n            <ul class=\"responsibilities\">\n              <li v-for=\"(task, i) in item.tasks\" :key=\"i\">{{ task }}</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      <!-- Tabs by Year View -->\n      <div v-else class=\"year-tabs\">\n        <ul class=\"tab-list\">\n          <li\n            v-for=\"year in years\"\n            :key=\"year\"\n            :class=\"year === selectedYear ? 'active' : ''\"\n            @click=\"selectedYear = year\"\n          >\n            {{ year }}\n          </li>\n        </ul>\n\n        <div class=\"tab-content\">\n          <div\n            v-for=\"(item, index) in experiencesByYear[selectedYear]\"\n            :key=\"index\"\n            class=\"experience-item\"\n          >\n            <div class=\"logo\">\n              <img :src=\"item.logo\" :alt=\"item.company + ' logo'\" />\n            </div>\n            <div class=\"details\">\n              <h2 class=\"company\">{{ item.company }}</h2>\n              <p class=\"position\">{{ item.position }}</p>\n              <p class=\"duration\">{{ item.startDate }} – {{ item.endDate }}</p>\n              <p class=\"location\">{{ item.location }}</p>\n              <ul class=\"responsibilities\">\n                <li v-for=\"(task, i) in item.tasks\" :key=\"i\">{{ task }}</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>\n</template>\n\n<script>\nexport default {\n  name: \"ProfessionalExperienceSection\",\n  data() {\n    return {\n      viewMode: \"all\", // 'all' or 'tabs'\n      searchQuery: \"\",\n      selectedYear: new Date().getFullYear().toString(),\n      experiences: [\n        {\n          company: \"Åbo Akademi University\",\n          position: \"Research Assistant\",\n          location: \"Turku, Finland\",\n          startDate: \"Oct 2024\",\n          endDate: \"Present\",\n          tasks: [\n            \"Researching automatization of co-simulation Simulink projects through Functional Mock-up Units (FMUs).\",\n            \"Exploring ubiquitous integration of automation logic for HVAC systems.\",\n          ],\n          logo: \"path/to/abo-akademi-logo.png\",\n          year: \"2024\",\n        },\n        {\n          company: \"Alstom\",\n          position: \"Master's Thesis Student\",\n          location: \"Remote\",\n          startDate: \"Feb 2024\",\n          endDate: \"Oct 2024\",\n          tasks: [\n            \"Performed advanced research in Requirements Engineering for automated technical diagrams.\",\n            \"Enhanced verification processes in railway safety-critical systems using AI and NLP.\",\n          ],\n          logo: \"path/to/alstom-logo.png\",\n          year: \"2024\",\n        },\n        // ... Add the remaining experiences here\n      ],\n    };\n  },\n  computed: {\n    // Filter experiences based on search query\n    filteredExperiences() {\n      const query = this.searchQuery.toLowerCase();\n      return this.experiences.filter(\n        (exp) =>\n          exp.company.toLowerCase().includes(query) ||\n          exp.position.toLowerCase().includes(query)\n      );\n    },\n\n    // Extract unique years\n    years() {\n      return [\n        ...new Set(this.experiences.map((experience) => experience.year)),\n      ].sort((a, b) => b - a);\n    },\n\n    // Group experiences by year\n    experiencesByYear() {\n      return this.experiences.reduce((acc, exp) => {\n        if (!acc[exp.year]) acc[exp.year] = [];\n        acc[exp.year].push(exp);\n        return acc;\n      }, {});\n    },\n  },\n  methods: {\n    setViewMode(mode) {\n      this.viewMode = mode;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.light-section {\n  background-color: #f9f9f9;\n  padding: 50px 20px;\n}\n\n.section-header {\n  text-align: center;\n  font-size: 2rem;\n  margin-bottom: 40px;\n}\n\n.view-selector {\n  display: flex;\n  justify-content: center;\n  margin-bottom: 20px;\n}\n\n.view-selector button {\n  margin: 0 10px;\n  padding: 10px 20px;\n  cursor: pointer;\n  border: none;\n  border-radius: 5px;\n  background-color: #007bff;\n  color: white;\n  font-size: 1rem;\n}\n\n.view-selector button.active {\n  background-color: #0056b3;\n}\n\n.filter-container {\n  margin: 20px auto;\n  text-align: center;\n}\n\n.filter-container input {\n  width: 50%;\n  padding: 10px;\n  font-size: 1rem;\n}\n\n.experience-list,\n.year-tabs .tab-content {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.experience-item {\n  display: flex;\n  align-items: flex-start;\n  gap: 20px;\n  padding: 20px;\n  border-bottom: 1px solid #ddd;\n}\n\n.logo img {\n  width: 60px;\n  height: 60px;\n  object-fit: contain;\n}\n\n.details {\n  flex: 1;\n}\n\n.details .company {\n  font-size: 1.25rem;\n  font-weight: bold;\n}\n\n.details .position {\n  font-size: 1rem;\n  color: #555;\n}\n\n.details .duration,\n.details .location {\n  font-size: 0.9rem;\n  color: #888;\n}\n\n.responsibilities {\n  margin-top: 10px;\n  list-style: disc;\n  padding-left: 20px;\n}\n\n.year-tabs .tab-list {\n  display: flex;\n  justify-content: center;\n  gap: 15px;\n  margin-bottom: 20px;\n}\n\n.year-tabs .tab-list li {\n  cursor: pointer;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border-radius: 5px;\n}\n\n.year-tabs .tab-list li.active {\n  background-color: #0056b3;\n}\n</style>\n"],"mappings":";;;;;;;;;;;;AA2FA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,QAAA;MAAA;MACAC,WAAA;MACAC,YAAA,MAAAC,IAAA,GAAAC,WAAA,GAAAC,QAAA;MACAC,WAAA,GACA;QACAC,OAAA;QACAC,QAAA;QACAC,QAAA;QACAC,SAAA;QACAC,OAAA;QACAC,KAAA,GACA,0GACA,yEACA;QACAC,IAAA;QACAC,IAAA;MACA,GACA;QACAP,OAAA;QACAC,QAAA;QACAC,QAAA;QACAC,SAAA;QACAC,OAAA;QACAC,KAAA,GACA,6FACA,uFACA;QACAC,IAAA;QACAC,IAAA;MACA;MACA;MAAA;IAEA;EACA;EACAC,QAAA;IACA;IACAC,oBAAA;MACA,MAAAC,KAAA,QAAAhB,WAAA,CAAAiB,WAAA;MACA,YAAAZ,WAAA,CAAAa,MAAA,CACAC,GAAA,IACAA,GAAA,CAAAb,OAAA,CAAAW,WAAA,GAAAG,QAAA,CAAAJ,KAAA,KACAG,GAAA,CAAAZ,QAAA,CAAAU,WAAA,GAAAG,QAAA,CAAAJ,KAAA,CACA;IACA;IAEA;IACAK,MAAA;MACA,QACA,OAAAC,GAAA,MAAAjB,WAAA,CAAAkB,GAAA,CAAAC,UAAA,IAAAA,UAAA,CAAAX,IAAA,GACA,CAAAY,IAAA,EAAAC,CAAA,EAAAC,CAAA,KAAAA,CAAA,GAAAD,CAAA;IACA;IAEA;IACAE,kBAAA;MACA,YAAAvB,WAAA,CAAAwB,MAAA,EAAAC,GAAA,EAAAX,GAAA;QACA,KAAAW,GAAA,CAAAX,GAAA,CAAAN,IAAA,GAAAiB,GAAA,CAAAX,GAAA,CAAAN,IAAA;QACAiB,GAAA,CAAAX,GAAA,CAAAN,IAAA,EAAAkB,IAAA,CAAAZ,GAAA;QACA,OAAAW,GAAA;MACA;IACA;EACA;EACAE,OAAA;IACAC,YAAAC,IAAA;MACA,KAAAnC,QAAA,GAAAmC,IAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}