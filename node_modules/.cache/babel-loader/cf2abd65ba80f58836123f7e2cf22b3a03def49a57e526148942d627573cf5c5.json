{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nexport default {\n  name: \"ProfessionalExperienceSection\",\n  data() {\n    return {\n      viewMode: \"all\",\n      // 'all', 'tabs', or 'filter'\n      searchQuery: \"\",\n      selectedYear: new Date().getFullYear().toString(),\n      skillSuggestions: [\"Data Science\", \"Software Engineering\", \"Research\"],\n      experiences: [{\n        company: \"Åbo Akademi University\",\n        position: \"Research Assistant\",\n        location: \"Turku, Finland\",\n        startDate: \"Oct 2024\",\n        endDate: \"Present\",\n        tasks: [\"Researching automatization of co-simulation Simulink projects through Functional Mock-up Units (FMUs).\", \"Exploring ubiquitous integration of automation logic for HVAC systems.\"],\n        logo: \"path/to/abo-akademi-logo.png\",\n        year: \"2024\",\n        skills: [\"Data Science\", \"Research\"],\n        type: \"Data Science\"\n      }, {\n        company: \"Alstom\",\n        position: \"Master's Thesis Student\",\n        location: \"Remote\",\n        startDate: \"Feb 2024\",\n        endDate: \"Oct 2024\",\n        tasks: [\"Performed advanced research in Requirements Engineering for automated technical diagrams.\", \"Enhanced verification processes in railway safety-critical systems using AI and NLP.\"],\n        logo: \"path/to/alstom-logo.png\",\n        year: \"2020\",\n        skills: [\"Requirements Engineering\", \"Research\", \"AI\"],\n        type: \"Research\"\n      }\n      // Add other experiences here\n      ]\n    };\n  },\n  computed: {\n    // Filter experiences based on search query or selected skill\n    filteredExperiences() {\n      let experiences = this.experiences;\n      if (this.viewMode === \"filter\" && this.searchQuery) {\n        const query = this.searchQuery.toLowerCase();\n\n        // Filter experiences based on all fields (including hidden ones like `type`)\n        experiences = experiences.filter(experience => Object.values(experience).some(value => {\n          if (typeof value === \"string\") {\n            return value.toLowerCase().includes(query);\n          }\n          if (Array.isArray(value)) {\n            return value.some(item => item.toLowerCase().includes(query));\n          }\n          return false;\n        }));\n      }\n      if (this.viewMode === \"year\" && this.selectedYear) {\n        return this.experiencesByYear[this.selectedYear] || [];\n      }\n      return experiences;\n    },\n    // Extract unique years\n    years() {\n      return [...new Set(this.experiences.map(experience => experience.year))].sort((a, b) => b - a);\n    },\n    // Group experiences by year\n    experiencesByYear() {\n      return this.experiences.reduce((acc, exp) => {\n        if (!acc[exp.year]) acc[exp.year] = [];\n        acc[exp.year].push(exp);\n        return acc;\n      }, {});\n    }\n  },\n  methods: {\n    setViewMode(mode) {\n      this.viewMode = mode;\n      if (mode === \"all\") {\n        this.searchQuery = \"\"; // Reset the search query\n        this.selectedYear = \"\"; // Clear year selection\n      } else if (mode !== \"year\") {\n        this.selectedYear = \"\"; // Clear year selection only if not in year mode\n      }\n    },\n    setFilter(query) {\n      this.viewMode = \"filter\"; // Ensure view mode switches to filter\n      this.searchQuery = query; // Populate the search bar with the selected query\n    }\n  }\n};","map":{"version":3,"names":["name","data","viewMode","searchQuery","selectedYear","Date","getFullYear","toString","skillSuggestions","experiences","company","position","location","startDate","endDate","tasks","logo","year","skills","type","computed","filteredExperiences","query","toLowerCase","filter","experience","Object","values","some","value","includes","Array","isArray","item","experiencesByYear","years","Set","map","sort","a","b","reduce","acc","exp","push","methods","setViewMode","mode","setFilter"],"sources":["src/components/ExperienceSection.vue"],"sourcesContent":["<template>\n  <section id=\"experience\" class=\"light-section\">\n    <div class=\"container\">\n      <h1 class=\"section-header\">Professional Experience</h1>\n\n      <!-- View Mode and Filter Buttons -->\n      <div class=\"view-selector\">\n        <button\n        :class=\"{ active: viewMode === 'all' }\"\n        @click=\"setViewMode('all')\"\n      >\n        Showing All\n      </button>\n      <button\n        :class=\"{ active: viewMode === 'year' }\"\n        @click=\"setViewMode('year')\"\n      >\n        View by Year\n      </button>\n      <button\n        :class=\"{ active: viewMode === 'filter' }\"\n        @click=\"setViewMode('filter')\"\n      >\n        Filter by Skills\n      </button>\n      </div>\n\n      <!-- Filter for Skills -->\n      <div v-if=\"viewMode === 'filter'\" class=\"filter-container\">\n        <input\n          type=\"text\"\n          v-model=\"searchQuery\"\n          placeholder=\"Search experiences...\"\n        />\n        <div class=\"skill-suggestions\">\n          <button\n            v-for=\"skill in skillSuggestions\"\n            :key=\"skill\"\n            @click=\"setFilter(skill)\"\n          >\n            {{ skill }}\n          </button>\n        </div>\n      </div>\n\n      <!-- All Experiences View -->\n      <div v-if=\"viewMode === 'all'\" class=\"experience-list\">\n        <div\n          v-for=\"(item, index) in filteredExperiences\"\n          :key=\"index\"\n          class=\"experience-item\"\n        >\n          <div class=\"logo\">\n            <img :src=\"item.logo\" :alt=\"item.company + ' logo'\" />\n          </div>\n          <div class=\"details\">\n            <h2 class=\"company\">{{ item.company }}</h2>\n            <p class=\"position\">{{ item.position }}</p>\n            <p class=\"duration\">{{ item.startDate }} – {{ item.endDate }}</p>\n            <p class=\"location\">{{ item.location }}</p>\n            <p class=\"skills\"><strong>Skills:</strong> {{ item.skills.join(\", \") }}</p>\n            <ul class=\"responsibilities\">\n              <li v-for=\"(task, i) in item.tasks\" :key=\"i\">{{ task }}</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      <!-- Tabs by Year View -->\n      <div v-if=\"viewMode === 'year'\" class=\"year-tabs\">\n        <ul class=\"tab-list\">\n          <li\n            v-for=\"year in years\"\n            :key=\"year\"\n            :class=\"year === selectedYear ? 'active' : ''\"\n            @click=\"selectedYear = year\"\n          >\n            {{ year }}\n          </li>\n        </ul>\n\n        <div class=\"tab-content\">\n          <div\n            v-for=\"(item, index) in filteredExperiences\"\n            :key=\"index\"\n            class=\"experience-item\"\n          >\n            <div class=\"logo\">\n              <img :src=\"item.logo\" :alt=\"item.company + ' logo'\" />\n            </div>\n            <div class=\"details\">\n              <h2 class=\"company\">{{ item.company }}</h2>\n              <p class=\"position\">{{ item.position }}</p>\n              <p class=\"duration\">{{ item.startDate }} – {{ item.endDate }}</p>\n              <p class=\"location\">{{ item.location }}</p>\n              <p class=\"skills\"><strong>Skills:</strong> {{ item.skills.join(\", \") }}</p>\n              <ul class=\"responsibilities\">\n                <li v-for=\"(task, i) in item.tasks\" :key=\"i\">{{ task }}</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>\n</template>\n\n<script>\nexport default {\n  name: \"ProfessionalExperienceSection\",\n  data() {\n    return {\n      viewMode: \"all\", // 'all', 'tabs', or 'filter'\n      searchQuery: \"\",\n      selectedYear: new Date().getFullYear().toString(),\n      skillSuggestions: [\"Data Science\", \"Software Engineering\", \"Research\"],\n      experiences: [\n        {\n          company: \"Åbo Akademi University\",\n          position: \"Research Assistant\",\n          location: \"Turku, Finland\",\n          startDate: \"Oct 2024\",\n          endDate: \"Present\",\n          tasks: [\n            \"Researching automatization of co-simulation Simulink projects through Functional Mock-up Units (FMUs).\",\n            \"Exploring ubiquitous integration of automation logic for HVAC systems.\",\n          ],\n          logo: \"path/to/abo-akademi-logo.png\",\n          year: \"2024\",\n          skills: [\"Data Science\", \"Research\"],\n          type: \"Data Science\",\n        },\n        {\n          company: \"Alstom\",\n          position: \"Master's Thesis Student\",\n          location: \"Remote\",\n          startDate: \"Feb 2024\",\n          endDate: \"Oct 2024\",\n          tasks: [\n            \"Performed advanced research in Requirements Engineering for automated technical diagrams.\",\n            \"Enhanced verification processes in railway safety-critical systems using AI and NLP.\",\n          ],\n          logo: \"path/to/alstom-logo.png\",\n          year: \"2020\",\n          skills: [\"Requirements Engineering\", \"Research\", \"AI\"],\n          type: \"Research\",\n        },\n        // Add other experiences here\n      ],\n    };\n  },\n  computed: {\n    // Filter experiences based on search query or selected skill\n    filteredExperiences() {\n      let experiences = this.experiences;\n\n      if (this.viewMode === \"filter\" && this.searchQuery) {\n        const query = this.searchQuery.toLowerCase();\n\n        // Filter experiences based on all fields (including hidden ones like `type`)\n        experiences = experiences.filter((experience) =>\n          Object.values(experience).some((value) => {\n            if (typeof value === \"string\") {\n              return value.toLowerCase().includes(query);\n            }\n            if (Array.isArray(value)) {\n              return value.some((item) => item.toLowerCase().includes(query));\n            }\n            return false;\n          })\n        );\n      }\n\n      if (this.viewMode === \"year\" && this.selectedYear) {\n        return this.experiencesByYear[this.selectedYear] || [];\n      }\n\n      return experiences;\n    },\n\n    // Extract unique years\n    years() {\n      return [\n        ...new Set(this.experiences.map((experience) => experience.year)),\n      ].sort((a, b) => b - a);\n    },\n\n    // Group experiences by year\n    experiencesByYear() {\n      return this.experiences.reduce((acc, exp) => {\n        if (!acc[exp.year]) acc[exp.year] = [];\n        acc[exp.year].push(exp);\n        return acc;\n      }, {});\n    },\n  },\n  methods: {\n  setViewMode(mode) {\n    this.viewMode = mode;\n    if (mode === \"all\") {\n      this.searchQuery = \"\"; // Reset the search query\n      this.selectedYear = \"\"; // Clear year selection\n    } else if (mode !== \"year\") {\n    this.selectedYear = \"\"; // Clear year selection only if not in year mode\n    }\n  },\n  setFilter(query) {\n    this.viewMode = \"filter\"; // Ensure view mode switches to filter\n    this.searchQuery = query; // Populate the search bar with the selected query\n    },\n  },\n};\n\n</script>\n\n\n<style scoped>\n.light-section {\n  background-color: #f9f9f9;\n  padding: 50px 20px;\n}\n\n.section-header {\n  text-align: center;\n  font-size: 2rem;\n  margin-bottom: 40px;\n}\n\n.view-selector {\n  display: flex;\n  justify-content: center;\n  margin-bottom: 20px;\n}\n\n.view-selector button {\n  margin: 0 10px;\n  padding: 10px 20px;\n  cursor: pointer;\n  border: none;\n  border-radius: 5px;\n  background-color: #007bff;\n  color: white;\n  font-size: 1rem;\n}\n\n.view-selector button.active {\n  background-color: #0056b3;\n}\n\n.filter-container {\n  margin: 20px auto;\n  text-align: center;\n}\n\n.filter-container input {\n  width: 50%;\n  padding: 10px;\n  font-size: 1rem;\n}\n\n.suggestions {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  margin-top: 10px;\n}\n\n.suggestions .suggestion {\n  cursor: pointer;\n  padding: 5px 10px;\n  border-radius: 5px;\n  background-color: #eee;\n  color: #333;\n  font-size: 0.9rem;\n}\n\n.suggestions .suggestion:hover {\n  background-color: #ccc;\n}\n\n.experience-list,\n.year-tabs .tab-content {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.experience-item {\n  display: flex;\n  align-items: flex-start;\n  gap: 20px;\n  padding: 20px;\n  border-bottom: 1px solid #ddd;\n}\n\n.logo img {\n  width: 60px;\n  height: 60px;\n  object-fit: contain;\n}\n\n.details {\n  flex: 1;\n}\n\n.details .company {\n  font-size: 1.25rem;\n  font-weight: bold;\n}\n\n.details .position {\n  font-size: 1rem;\n  color: #555;\n}\n\n.details .duration,\n.details .location {\n  font-size: 0.9rem;\n  color: #888;\n}\n\n.details .skills {\n  font-size: 0.9rem;\n  color: #444;\n  margin-top: 10px;\n}\n\n.responsibilities {\n  margin-top: 10px;\n  list-style: disc;\n  padding-left: 20px;\n}\n\n.year-tabs .tab-list {\n  display: flex;\n  justify-content: center;\n  gap: 15px;\n  margin-bottom: 20px;\n}\n\n.year-tabs .tab-list li {\n  cursor: pointer;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border-radius: 5px;\n}\n\n.year-tabs .tab-list li.active {\n  background-color: #0056b3;\n}\n</style>\n"],"mappings":";;;;;;;;;;;;;AA4GA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,QAAA;MAAA;MACAC,WAAA;MACAC,YAAA,MAAAC,IAAA,GAAAC,WAAA,GAAAC,QAAA;MACAC,gBAAA;MACAC,WAAA,GACA;QACAC,OAAA;QACAC,QAAA;QACAC,QAAA;QACAC,SAAA;QACAC,OAAA;QACAC,KAAA,GACA,0GACA,yEACA;QACAC,IAAA;QACAC,IAAA;QACAC,MAAA;QACAC,IAAA;MACA,GACA;QACAT,OAAA;QACAC,QAAA;QACAC,QAAA;QACAC,SAAA;QACAC,OAAA;QACAC,KAAA,GACA,6FACA,uFACA;QACAC,IAAA;QACAC,IAAA;QACAC,MAAA;QACAC,IAAA;MACA;MACA;MAAA;IAEA;EACA;EACAC,QAAA;IACA;IACAC,oBAAA;MACA,IAAAZ,WAAA,QAAAA,WAAA;MAEA,SAAAP,QAAA,sBAAAC,WAAA;QACA,MAAAmB,KAAA,QAAAnB,WAAA,CAAAoB,WAAA;;QAEA;QACAd,WAAA,GAAAA,WAAA,CAAAe,MAAA,CAAAC,UAAA,IACAC,MAAA,CAAAC,MAAA,CAAAF,UAAA,EAAAG,IAAA,CAAAC,KAAA;UACA,WAAAA,KAAA;YACA,OAAAA,KAAA,CAAAN,WAAA,GAAAO,QAAA,CAAAR,KAAA;UACA;UACA,IAAAS,KAAA,CAAAC,OAAA,CAAAH,KAAA;YACA,OAAAA,KAAA,CAAAD,IAAA,CAAAK,IAAA,IAAAA,IAAA,CAAAV,WAAA,GAAAO,QAAA,CAAAR,KAAA;UACA;UACA;QACA,EACA;MACA;MAEA,SAAApB,QAAA,oBAAAE,YAAA;QACA,YAAA8B,iBAAA,MAAA9B,YAAA;MACA;MAEA,OAAAK,WAAA;IACA;IAEA;IACA0B,MAAA;MACA,QACA,OAAAC,GAAA,MAAA3B,WAAA,CAAA4B,GAAA,CAAAZ,UAAA,IAAAA,UAAA,CAAAR,IAAA,GACA,CAAAqB,IAAA,EAAAC,CAAA,EAAAC,CAAA,KAAAA,CAAA,GAAAD,CAAA;IACA;IAEA;IACAL,kBAAA;MACA,YAAAzB,WAAA,CAAAgC,MAAA,EAAAC,GAAA,EAAAC,GAAA;QACA,KAAAD,GAAA,CAAAC,GAAA,CAAA1B,IAAA,GAAAyB,GAAA,CAAAC,GAAA,CAAA1B,IAAA;QACAyB,GAAA,CAAAC,GAAA,CAAA1B,IAAA,EAAA2B,IAAA,CAAAD,GAAA;QACA,OAAAD,GAAA;MACA;IACA;EACA;EACAG,OAAA;IACAC,YAAAC,IAAA;MACA,KAAA7C,QAAA,GAAA6C,IAAA;MACA,IAAAA,IAAA;QACA,KAAA5C,WAAA;QACA,KAAAC,YAAA;MACA,WAAA2C,IAAA;QACA,KAAA3C,YAAA;MACA;IACA;IACA4C,UAAA1B,KAAA;MACA,KAAApB,QAAA;MACA,KAAAC,WAAA,GAAAmB,KAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}