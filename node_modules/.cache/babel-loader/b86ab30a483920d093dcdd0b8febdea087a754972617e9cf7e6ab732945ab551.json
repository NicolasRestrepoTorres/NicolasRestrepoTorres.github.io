{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport ExperienceItem from \"@/components/ExperienceItem.vue\";\nexport default {\n  name: \"ExperienceSection\",\n  components: {\n    ExperienceItem // Register the ExperienceItem component\n  },\n  data() {\n    return {\n      viewMode: \"all\",\n      searchQuery: \"\",\n      selectedYear: new Date().getFullYear().toString()\n    };\n  },\n  mounted() {\n    console.log(\"Received props:\", this.sectionTitle, this.experiences);\n  },\n  setup(props) {\n    console.log(\"Received props:\", props.sectionTitle, props.experiences);\n    return {};\n  },\n  computed: {\n    // Filter experiences based on search query or selected skill\n    filteredExperiences() {\n      if (!this.searchQuery) return this.sortedChronology;\n      const query = this.searchQuery.toLowerCase();\n      return this.experiences.filter(experience => experience.skills.some(skill => skill.toLowerCase().includes(query)));\n    },\n    // Extract unique years for the \"By Year\" tab\n    years() {\n      return [...new Set(this.experiences.map(experience => experience.year))].sort((a, b) => b - a);\n    },\n    // Group experiences by year for the \"By Year\" tab\n    experiencesByYear() {\n      return this.experiences.reduce((acc, exp) => {\n        if (!acc[exp.year]) acc[exp.year] = [];\n        acc[exp.year].push(exp);\n        return acc;\n      }, {});\n    },\n    // Sort experiences chronologically for the \"All\" tab\n    sortedChronology() {\n      return [...this.experiences].sort((a, b) => {\n        const dateA = new Date(a.endDate === \"Present\" ? new Date() : a.endDate);\n        const dateB = new Date(b.endDate === \"Present\" ? new Date() : b.endDate);\n        return dateB - dateA; // Sort descending by end date\n      });\n    }\n  },\n  methods: {\n    setViewMode(mode) {\n      this.viewMode = mode;\n      if (mode !== \"year\") {\n        this.selectedYear = \"\"; // Reset year selection if not in year mode\n      }\n    },\n    setFilter(skill) {\n      this.viewMode = \"filter\"; // Ensure filter view\n      this.searchQuery = skill; // Populate the search bar with selected skill\n    }\n  },\n  props: {\n    sectionTitle: {\n      type: String,\n      required: true\n    },\n    experiences: {\n      type: Array,\n      required: false\n    },\n    projects: {\n      type: Array,\n      required: false\n    }\n  }\n};","map":{"version":3,"names":["ExperienceItem","name","components","data","viewMode","searchQuery","selectedYear","Date","getFullYear","toString","mounted","console","log","sectionTitle","experiences","setup","props","computed","filteredExperiences","sortedChronology","query","toLowerCase","filter","experience","skills","some","skill","includes","years","Set","map","year","sort","a","b","experiencesByYear","reduce","acc","exp","push","dateA","endDate","dateB","methods","setViewMode","mode","setFilter","type","String","required","Array","projects"],"sources":["src/components/ExperienceSection.vue"],"sourcesContent":["<template>\n  <section class=\"light-section\">\n    <div class=\"container\">\n      <h1 class=\"section-header\">{{ sectionTitle }}</h1>\n\n\n      <div v-if=\"!experiences || experiences.length === 0\">\n        <p>No data available. Please check if the props are being passed correctly.</p>\n      </div>\n      <!-- View Mode and Filter Buttons -->\n      <div class=\"view-selector\">\n        <button\n          :class=\"{ active: viewMode === 'all' }\"\n          @click=\"setViewMode('all')\"\n        >\n          Showing All\n        </button>\n        <button\n          :class=\"{ active: viewMode === 'year' }\"\n          @click=\"setViewMode('year')\"\n        >\n          View by Year\n        </button>\n        <button\n          :class=\"{ active: viewMode === 'filter' }\"\n          @click=\"setViewMode('filter')\"\n        >\n          Filter by Skills\n        </button>\n      </div>\n\n      <!-- Filter for Skills -->\n      <div v-if=\"viewMode === 'filter'\" class=\"filter-container\">\n        <input\n          type=\"text\"\n          v-model=\"searchQuery\"\n          placeholder=\"Search...\"\n        />\n        <div class=\"skill-suggestions\">\n          <button\n            v-for=\"skill in [...new Set(data.flatMap((item) => item.skills))]\"\n            :key=\"skill\"\n            @click=\"setFilter(skill)\"\n          >\n            {{ skill }}\n          </button>\n        </div>\n      </div>\n\n      <!-- All Items View -->\n      <div v-if=\"viewMode === 'all'\" class=\"item-list\">\n        <div\n          v-for=\"(item, index) in sortedChronology\"\n          :key=\"index\"\n          class=\"experience-item\"\n        >\n          <ExperienceItem :item=\"item\" />\n        </div>\n      </div>\n\n      <!-- Tabs by Year View -->\n      <div v-if=\"viewMode === 'year'\" class=\"year-tabs\">\n        <ul class=\"tab-list\">\n          <li\n            v-for=\"year in years\"\n            :key=\"year\"\n            :class=\"{ active: year === selectedYear }\"\n            @click=\"selectedYear = year\"\n          >\n            {{ year }}\n          </li>\n        </ul>\n\n        <div class=\"tab-content\">\n          <div\n            v-for=\"(item, index) in itemsByYear[selectedYear]\"\n            :key=\"index\"\n            class=\"experience-item\"\n          >\n            <ExperienceItem :item=\"item\" />\n          </div>\n        </div>\n      </div>\n\n      <!-- Filtered Items View -->\n      <div v-if=\"viewMode === 'filter'\" class=\"item-list\">\n        <div\n          v-for=\"(item, index) in filteredItems\"\n          :key=\"index\"\n          class=\"experience-item\"\n        >\n          <ExperienceItem :item=\"item\" />\n        </div>\n      </div>\n    </div>\n  </section>\n</template>\n\n\n<script>\nimport ExperienceItem from \"@/components/ExperienceItem.vue\";\nexport default {\n  name: \"ExperienceSection\",\n  components: {\n    ExperienceItem, // Register the ExperienceItem component\n  },\n  data() {\n    return {\n      viewMode: \"all\",\n      searchQuery: \"\",\n      selectedYear: new Date().getFullYear().toString(),\n    };\n  },\n  mounted() {\n  console.log(\"Received props:\", this.sectionTitle, this.experiences);\n},\nsetup(props) {\n    console.log(\"Received props:\", props.sectionTitle, props.experiences);\n    return {};\n  },\ncomputed: {\n    // Filter experiences based on search query or selected skill\n    filteredExperiences() {\n      if (!this.searchQuery) return this.sortedChronology;\n      const query = this.searchQuery.toLowerCase();\n      return this.experiences.filter((experience) =>\n        experience.skills.some((skill) => skill.toLowerCase().includes(query))\n      );\n    },\n\n    // Extract unique years for the \"By Year\" tab\n    years() {\n      return [\n        ...new Set(this.experiences.map((experience) => experience.year)),\n      ].sort((a, b) => b - a);\n    },\n\n    // Group experiences by year for the \"By Year\" tab\n    experiencesByYear() {\n      return this.experiences.reduce((acc, exp) => {\n        if (!acc[exp.year]) acc[exp.year] = [];\n        acc[exp.year].push(exp);\n        return acc;\n      }, {});\n    },\n\n    // Sort experiences chronologically for the \"All\" tab\n    sortedChronology() {\n      return [...this.experiences].sort((a, b) => {\n        const dateA = new Date(a.endDate === \"Present\" ? new Date() : a.endDate);\n        const dateB = new Date(b.endDate === \"Present\" ? new Date() : b.endDate);\n        return dateB - dateA; // Sort descending by end date\n      });\n    },\n  },\n  methods: {\n    setViewMode(mode) {\n      this.viewMode = mode;\n      if (mode !== \"year\") {\n        this.selectedYear = \"\"; // Reset year selection if not in year mode\n      }\n    },\n    setFilter(skill) {\n      this.viewMode = \"filter\"; // Ensure filter view\n      this.searchQuery = skill; // Populate the search bar with selected skill\n    },\n  },\n  props: {\n  sectionTitle: {\n    type: String,\n    required: true,\n  },\n  experiences: {\n    type: Array,\n    required: false,\n  },\n  projects: {\n    type: Array,\n    required: false,\n  },\n},\n\n};\n</script>\n\n\n<style scoped>\n.light-section {\n  background-color: #f9f9f9;\n  padding: 50px 20px;\n}\n\n.section-header {\n  text-align: center;\n  font-size: 2rem;\n  margin-bottom: 40px;\n}\n\n.view-selector {\n  display: flex;\n  justify-content: center;\n  margin-bottom: 20px;\n}\n\n.view-selector button {\n  margin: 0 10px;\n  padding: 10px 20px;\n  cursor: pointer;\n  border: none;\n  border-radius: 5px;\n  background-color: #007bff;\n  color: white;\n  font-size: 1rem;\n  transition: background-color 0.3s;\n}\n\n.view-selector button.active {\n  background-color: #0056b3;\n}\n\n.view-selector button:hover {\n  background-color: #0056b3;\n}\n\n.filter-container {\n  margin: 20px auto;\n  text-align: center;\n}\n\n.filter-container input {\n  width: 50%;\n  padding: 10px;\n  font-size: 1rem;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  transition: border-color 0.3s;\n}\n\n.filter-container input:focus {\n  border-color: #007bff;\n  outline: none;\n}\n\n.skill-suggestions {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  margin-top: 20px;\n  flex-wrap: wrap;\n}\n\n.skill-suggestions button {\n  cursor: pointer;\n  padding: 5px 15px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  background-color: #f9f9f9;\n  color: #333;\n  font-size: 1rem;\n  transition: background-color 0.3s, border-color 0.3s;\n}\n\n.skill-suggestions button:hover {\n  background-color: #007bff;\n  color: white;\n  border-color: #007bff;\n}\n\n.skill-suggestions button.active {\n  background-color: #0056b3;\n  color: white;\n  border-color: #0056b3;\n}\n\n.experience-list,\n.year-tabs .tab-content {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.experience-item {\n  display: flex;\n  align-items: flex-start;\n  gap: 20px;\n  padding: 20px;\n  border-bottom: 1px solid #ddd;\n}\n\n.logo img {\n  width: 60px;\n  height: 60px;\n  object-fit: contain;\n}\n\n.details {\n  flex: 1;\n}\n\n.details .company {\n  font-size: 1.25rem;\n  font-weight: bold;\n}\n\n.details .position {\n  font-size: 1rem;\n  color: #555;\n}\n\n.details .duration,\n.details .location {\n  font-size: 0.9rem;\n  color: #888;\n}\n\n.details .skills {\n  font-size: 0.9rem;\n  color: #444;\n  margin-top: 10px;\n}\n\n.responsibilities {\n  margin-top: 10px;\n  list-style: disc;\n  padding-left: 20px;\n}\n\n.year-tabs .tab-list {\n  display: flex;\n  justify-content: center;\n  gap: 15px;\n  margin-bottom: 20px;\n}\n\n.year-tabs .tab-list li {\n  cursor: pointer;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border-radius: 5px;\n  transition: background-color 0.3s;\n}\n\n.year-tabs .tab-list li:hover {\n  background-color: #0056b3;\n}\n\n.year-tabs .tab-list li.active {\n  background-color: #0056b3;\n}\n</style>\n\n"],"mappings":";;;;;;;;;;;;;AAoGA,OAAAA,cAAA;AACA;EACAC,IAAA;EACAC,UAAA;IACAF,cAAA;EACA;EACAG,KAAA;IACA;MACAC,QAAA;MACAC,WAAA;MACAC,YAAA,MAAAC,IAAA,GAAAC,WAAA,GAAAC,QAAA;IACA;EACA;EACAC,QAAA;IACAC,OAAA,CAAAC,GAAA,yBAAAC,YAAA,OAAAC,WAAA;EACA;EACAC,MAAAC,KAAA;IACAL,OAAA,CAAAC,GAAA,oBAAAI,KAAA,CAAAH,YAAA,EAAAG,KAAA,CAAAF,WAAA;IACA;EACA;EACAG,QAAA;IACA;IACAC,oBAAA;MACA,UAAAb,WAAA,cAAAc,gBAAA;MACA,MAAAC,KAAA,QAAAf,WAAA,CAAAgB,WAAA;MACA,YAAAP,WAAA,CAAAQ,MAAA,CAAAC,UAAA,IACAA,UAAA,CAAAC,MAAA,CAAAC,IAAA,CAAAC,KAAA,IAAAA,KAAA,CAAAL,WAAA,GAAAM,QAAA,CAAAP,KAAA,EACA;IACA;IAEA;IACAQ,MAAA;MACA,QACA,OAAAC,GAAA,MAAAf,WAAA,CAAAgB,GAAA,CAAAP,UAAA,IAAAA,UAAA,CAAAQ,IAAA,GACA,CAAAC,IAAA,EAAAC,CAAA,EAAAC,CAAA,KAAAA,CAAA,GAAAD,CAAA;IACA;IAEA;IACAE,kBAAA;MACA,YAAArB,WAAA,CAAAsB,MAAA,EAAAC,GAAA,EAAAC,GAAA;QACA,KAAAD,GAAA,CAAAC,GAAA,CAAAP,IAAA,GAAAM,GAAA,CAAAC,GAAA,CAAAP,IAAA;QACAM,GAAA,CAAAC,GAAA,CAAAP,IAAA,EAAAQ,IAAA,CAAAD,GAAA;QACA,OAAAD,GAAA;MACA;IACA;IAEA;IACAlB,iBAAA;MACA,gBAAAL,WAAA,EAAAkB,IAAA,EAAAC,CAAA,EAAAC,CAAA;QACA,MAAAM,KAAA,OAAAjC,IAAA,CAAA0B,CAAA,CAAAQ,OAAA,qBAAAlC,IAAA,KAAA0B,CAAA,CAAAQ,OAAA;QACA,MAAAC,KAAA,OAAAnC,IAAA,CAAA2B,CAAA,CAAAO,OAAA,qBAAAlC,IAAA,KAAA2B,CAAA,CAAAO,OAAA;QACA,OAAAC,KAAA,GAAAF,KAAA;MACA;IACA;EACA;EACAG,OAAA;IACAC,YAAAC,IAAA;MACA,KAAAzC,QAAA,GAAAyC,IAAA;MACA,IAAAA,IAAA;QACA,KAAAvC,YAAA;MACA;IACA;IACAwC,UAAApB,KAAA;MACA,KAAAtB,QAAA;MACA,KAAAC,WAAA,GAAAqB,KAAA;IACA;EACA;EACAV,KAAA;IACAH,YAAA;MACAkC,IAAA,EAAAC,MAAA;MACAC,QAAA;IACA;IACAnC,WAAA;MACAiC,IAAA,EAAAG,KAAA;MACAD,QAAA;IACA;IACAE,QAAA;MACAJ,IAAA,EAAAG,KAAA;MACAD,QAAA;IACA;EACA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}